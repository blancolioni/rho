shader Rho.Shaders.Light.Spot : Rho.Shaders.Light is

    vertex
        Fragment_Normal : out Vector_3;
    begin
        Fragment_Normal := Vertex_Normal;
    end vertex;

    fragment
        Camera_Position : uniform Vector_3;
        Spot_Position   : uniform Vector_3;
        Spot_Color      : uniform Vector_3;
        Attenuation     : uniform Float;
        Coefficient     : uniform Float;
        Fragment_Normal : in Vector_3;
    require
        Surface_Color      : Color;
--        Shininess          : Float    := 0.0;
--        Specular_Color     : Vector_3 := Vector_3 (0.0, 0.0, 0.0);
    local
        Normal            : Vector_3 := 
            Normalize (Transpose (Inverse (Matrix_3 (Model))) * Fragment_Normal);
        Surface_Position  : Vector_3 := Vector_3 (Model * Vector_4 (Fragment_Vertex, 1.0));
        Surface_To_Light  : Vector_3 := Normalize (Spot_Position - Surface_Position);
        Surface_To_Camera : Vector_3 := Normalize (Camera_Position - Surface_Position);
        Diffuse_Coeff     : Float    := Max (0.0, dot (Normal, Surface_To_Light));
        Diffuse           : Vector_3 := Diffuse_Coeff * Surface_Color.Rgb * Spot_Color;
--        Specular_Coeff    : Float    :=
--            (if Diffuse_Coeff = 0.0 then 0.0
--             else Max (0.0, Dot (Surface_To_Camera, Reflect (0.0 - Surface_To_Light, Normal))) ** Shininess);
--        Specular          : Vector_3 := Specular_Coeff * Specular_Color * Spot_Color;
        Distance          : Float    := abs (Spot_Position - Surface_Position);
        Attenuation_Coeff : Float    := 1.0 / (1.0 + Attenuation * Distance ** 2);
        Linear_Color      : Vector_3 := Attenuation_Coeff * Diffuse; --  (Diffuse + Specular);
        Gamma_Corrected   : Vector_3 := Linear_Color ** Vector_3 (1.0 / 2.2);
    begin
        Lit_Color := Gamma_Corrected;
    end fragment;

end Rho.Shaders.Light.Spot;